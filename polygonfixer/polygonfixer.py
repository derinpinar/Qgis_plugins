# -*- coding: utf-8 -*-
"""
/***************************************************************************
 PolygonFixer
                                 A QGIS plugin
 This plugin detect and fix overlapping,  self interesection, line intersetion and close gaps from adjacant geometries
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2020-11-03
        git sha              : $Format:%H$
        copyright            : (C) 2020 by M. Andaç Derinpınar
        email                : mustafaderinpinar@hotmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction,QFileDialog
from qgis.core import QgsProject,Qgis,QgsSpatialIndex,QgsVectorLayer,QgsFeatureRequest,QgsWkbTypes,QgsVectorFileWriter

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .polygonfixer_dialog import PolygonFixerDialog
import os.path
import time


class PolygonFixer:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'PolygonFixer_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Polygon Fixer')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('PolygonFixer', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToVectorMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/polygonfixer/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Polygon Fixer'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginVectorMenu(
                self.tr(u'&Polygon Fixer'),
                action)
            self.iface.removeToolBarIcon(action)


    def select_output_file(self):
        filename, _filter = QFileDialog.getSaveFileName(
            self.dlg, "Select your output file ", "", '*.shp')
        self.dlg.lineEdit.setText(filename)

    def MemoryPolygonLayer(self,layer):
        # Create Memory Layer
        memory_layer = QgsVectorLayer("Polygon?crs=epsg:4326", "Fixed Polygon", "memory")
        memory_layer_data = memory_layer.dataProvider()
        attr = layer.dataProvider().fields().toList()
        memory_layer_data.addAttributes(attr)
        memory_layer.updateFields()

        feats = [feat for feat in layer.getFeatures()]
        memory_layer_data.addFeatures(feats)
        return memory_layer

    def SpatialIndex(self,mem_layer):
        # Create Spatial Index
        index = QgsSpatialIndex()
        for f in mem_layer.getFeatures():
            index.insertFeature(f)
        return index

    def GeometryControl(self,geom):
        # Check Geometry Type and Return Biggest Polygon
        areas = []
        geomSingleType = QgsWkbTypes.isSingleType(geom.wkbType())

        if geomSingleType:
            return geom

        elif geom.isEmpty():
            print("Geometry Error !")
            return geom
        else:
            for i in geom.asGeometryCollection():
                if i.type() == QgsWkbTypes.PointGeometry:
                    print("Point geometry removed")
                elif i.type() == QgsWkbTypes.LineGeometry:
                    print("Line geometry removed")
                elif i.type() == QgsWkbTypes.PolygonGeometry:
                    areas.append([i.area(), i])
                elif i.type() == QgsWkbTypes.UnknownGeometry:
                    print("Unknown geometry removed")
            print("Biggest area selected")
            return (max(areas)[1])

    def feature_difference(self,layer):
        # Get the intersects polygons and difference from neihghboor
        start = time.time()

        mem_layer = self.MemoryPolygonLayer(layer)
        index = self.SpatialIndex(mem_layer)

        for f1 in mem_layer.getFeatures():
            geom1 = f1.geometry()
            intersecting_ids = index.intersects(geom1.boundingBox())

            request = QgsFeatureRequest()
            request.setFilterFids(intersecting_ids)
            features = mem_layer.getFeatures(request)

            for f2 in features:
                if f1['id'] != f2['id'] and f2['id'] is not None:
                    geom2 = f2.geometry()
                    new_geom = geom1.difference(geom2)

                    if new_geom.area() != geom1.area():
                        if new_geom.type() == QgsWkbTypes.UnknownGeometry:
                            print("Unknown Geometry Type Detected !", "in id: ", f1['id'])
                            new_geom = self.GeometryControl(new_geom)
                            new_geom = new_geom if new_geom.isEmpty() == False else geom1

                        mem_layer.dataProvider().changeGeometryValues({f1.id(): new_geom})
                        geom1 = new_geom

        mem_layer.updateFields()
        end = time.time()
        print(round(end - start, 6), " time elapsed for difference")

        return mem_layer

    def featurebuffer(self,layer):
        mem_layer = self.MemoryPolygonLayer(layer)

        for f1 in mem_layer.getFeatures():
            geom1 = f1.geometry()
            buffer = geom1.buffer(0.00001, 5)
            mem_layer.dataProvider().changeGeometryValues({f1.id(): buffer})

        mem_layer.updateFields()
        end = time.time()

        return mem_layer


    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = PolygonFixerDialog()
            self.dlg.pushButton.clicked.connect(self.select_output_file)

        # Fetch the currently loaded layers
        layers = QgsProject.instance().layerTreeRoot().children()
        # Clear the contents of the comboBox from previous runs
        self.dlg.comboBox.clear()
        # Populate the comboBox with names of all the loaded layers
        self.dlg.comboBox.addItems([layer.name() for layer in layers])

        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:

            selectedLayerIndex = self.dlg.comboBox.currentIndex()
            selectedLayer = layers[selectedLayerIndex].layer()

            if self.dlg.checkBox.isChecked():
                buffered_layer = self.featurebuffer(selectedLayer)
            else:
                buffered_layer = selectedLayer

            memory_layer = self.feature_difference(buffered_layer)

            if self.dlg.lineEdit.text():
                _writer = QgsVectorFileWriter.writeAsVectorFormat(memory_layer,str(self.dlg.lineEdit.text()),"utf-8",memory_layer.crs(),"ESRI Shapefile")
            else:
                QgsProject.instance().addMapLayer(memory_layer)

            self.iface.messageBar().pushMessage(
                selectedLayer.name() + " layer fixed successfully",
                level=Qgis.Success, duration=3)


